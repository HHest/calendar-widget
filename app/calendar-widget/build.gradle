buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:2.3.2'
        classpath 'org.ajoberstar:grgit:1.9.2'
    }
}

apply plugin: 'com.android.application'

repositories {
    jcenter()
}

dependencies {
    compile 'joda-time:joda-time:2.9.7'
    compile 'com.larswerkman:HoloColorPicker:1.5'
    compile 'com.android.support:appcompat-v7:25.3.1'
}

android {

    compileSdkVersion 25
    buildToolsVersion '25.0.3'

    defaultConfig {
        versionName '1.10.1' + getVersionNameExtension()
        versionCode getVersionCodeInteger()
        minSdkVersion 15
        targetSdkVersion 25

        testApplicationId "com.plusonelabs.calendar.tests"
        testInstrumentationRunner "android.test.InstrumentationTestRunner"
    }

    buildTypes {
        release {
            minifyEnabled false
            lintOptions {
                warning 'MissingTranslation','InvalidPackage'
            }
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }

    lintOptions {
        abortOnError false
    }

    if (project.hasProperty('calendarStoreFile')) {
        signingConfigs {
            releaseConfig {
                storeFile file(calendarStoreFile)
                storePassword calendarStorePassword
                keyAlias calendarKeyAlias
                keyPassword calendarKeyPassword
            }
        }
        buildTypes.release.signingConfig signingConfigs.releaseConfig
    }
    // See https://www.timroes.de/2013/09/22/handling-signing-configs-with-gradle/
    if (project.hasProperty("calendar-widget.signing")
            && new File(project.property("calendar-widget.signing").toString() + ".gradle").exists()) {
        apply from: project.property("calendar-widget.signing") + ".gradle";
    }
}

static getVersionNameExtension() {
    try {
        def git = org.ajoberstar.grgit.Grgit.open()
        def versionNameSuffix = "-${git.head().getAbbreviatedId(8)}"
        git.close()
        return versionNameSuffix
    } catch (ignored) {
        return ""
    }
}

static getVersionCodeInteger() {
    try {
        def git = org.ajoberstar.grgit.Grgit.open()
        def versionCode = git.log().size()
        git.close()
        return versionCode
    } catch (ignored) {
        return 1
    }
}
